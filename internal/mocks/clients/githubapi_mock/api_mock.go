// Code generated by MockGen. DO NOT EDIT.
// Source: ../interfaces/github_api.go

// Package githubapi_mock is a generated GoMock package.
package githubapi_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v31/github"
	reflect "reflect"
)

// GithubAPI is a mock of GithubAPI interface
type GithubAPI struct {
	ctrl     *gomock.Controller
	recorder *GithubAPIMockRecorder
}

// GithubAPIMockRecorder is the mock recorder for GithubAPI
type GithubAPIMockRecorder struct {
	mock *GithubAPI
}

// NewGithubAPI creates a new mock instance
func NewGithubAPI(ctrl *gomock.Controller) *GithubAPI {
	mock := &GithubAPI{ctrl: ctrl}
	mock.recorder = &GithubAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *GithubAPI) EXPECT() *GithubAPIMockRecorder {
	return m.recorder
}

// GetRaw mocks base method
func (m *GithubAPI) GetRaw(ctx context.Context, owner, repo string, number int, opts github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRaw indicates an expected call of GetRaw
func (mr *GithubAPIMockRecorder) GetRaw(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*GithubAPI)(nil).GetRaw), ctx, owner, repo, number, opts)
}
