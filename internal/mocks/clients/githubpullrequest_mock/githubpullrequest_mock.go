// Code generated by MockGen. DO NOT EDIT.
// Source: ../githubintf/github_pull_request.go

// Package githubpullrequest_mock is a generated GoMock package.
package githubpullrequest_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v31/github"
	reflect "reflect"
)

// GithubPullRequest is a mock of GithubPullRequest interface
type GithubPullRequest struct {
	ctrl     *gomock.Controller
	recorder *GithubPullRequestMockRecorder
}

// GithubPullRequestMockRecorder is the mock recorder for GithubPullRequest
type GithubPullRequestMockRecorder struct {
	mock *GithubPullRequest
}

// NewGithubPullRequest creates a new mock instance
func NewGithubPullRequest(ctrl *gomock.Controller) *GithubPullRequest {
	mock := &GithubPullRequest{ctrl: ctrl}
	mock.recorder = &GithubPullRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *GithubPullRequest) EXPECT() *GithubPullRequestMockRecorder {
	return m.recorder
}

// GetRaw mocks base method
func (m *GithubPullRequest) GetRaw(ctx context.Context, owner, repo string, number int, opts github.RawOptions) (string, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRaw", ctx, owner, repo, number, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRaw indicates an expected call of GetRaw
func (mr *GithubPullRequestMockRecorder) GetRaw(ctx, owner, repo, number, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRaw", reflect.TypeOf((*GithubPullRequest)(nil).GetRaw), ctx, owner, repo, number, opts)
}
